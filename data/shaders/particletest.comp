
layout(local_size_x = PARTICLE_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = BINDING_SSBO_POSITION) buffer PositionBuffer
{
	vec3 pos[];
};

layout(std430, binding = BINDING_SSBO_VELOCITY) buffer VelocityBuffer
{
	vec3 vel[];
};

layout(std430, binding = BINDING_SSBO_LIFE) buffer LifeBuffer
{
	vec2 life[];
};

float rand(vec2 seed) {
	return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453);
}

float randRange(float lo, float hi, vec2 seed) {
	return (hi - lo) * rand(seed) + lo;
}

vec3 randVec(float seed) {
	return vec3(rand(vec2(seed, 1.01)), rand(vec2(seed, 2.3)), rand(vec2(seed, 3.1))) * vec3(2.0) - vec3(1.0);
}

vec3 randDir(float seed) {
	return normalize(randVec(seed));
}

const float G = 0.3;

void main()
{
	if (dt <= 0.0)
		return;
	uint index = gl_GlobalInvocationID.x;
	if (life[index].x <= 0.0) {
		float seed = float(index) / float(gl_NumWorkGroups.x) * dt + sin(time) + 0.17231;
		life[index].x = max(randRange(particle.lifeTimeMinMax.x, particle.lifeTimeMinMax.y, vec2(seed, 3.4)), 0.01);
		life[index].y = life[index].x; // Original max life
		// Pick position inside a sphere
		float radius = mix(particle.emitRadiusMinMax.x, particle.emitRadiusMinMax.y, rand(vec2(seed, 1.267)));
		pos[index] = randDir(seed) * radius;
		// Determine emit direction & velocity in local space
		vec3 naturalDir = radius > 0.01 ? normalize(pos[index]) : randDir(seed * 0.789);
		vec3 forward = vec3(0, 0, -1);
		vec3 dir = normalize(mix(naturalDir, forward, particle.directionality));
		vel[index] = dir * randRange(particle.speedMinMax.x, particle.speedMinMax.y, vec2(seed, 3.4));
		// World space conversion at the end
		if (particle.localSpace < 0.5) {
			pos[index] = (modelMatrix * vec4(pos[index], 1.0)).xyz;
			vel[index] = (modelMatrix * vec4(vel[index], 0.0)).xyz;
		}

		// Orbit test: Try to find velocity somewhat perpendicular to the center
		//vel[index] = cross(-dir, randDir(seed * 0.345)) * 0.5 + dir * 0.5;

	} else {
		life[index].x = max(life[index].x - dt, 0.0);
		pos[index] += vel[index] * dt;
		//vec3 acc = -normalize(pos[index]) * (G / length(pos[index]));
		//vel[index] += acc * dt;
	}
}
